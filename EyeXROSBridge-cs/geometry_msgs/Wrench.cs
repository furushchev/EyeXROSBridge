//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2015-02-02T21:01:49+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
using RosSharp.std_msgs;
namespace RosSharp.geometry_msgs
{
    ///<exclude/>
    public class Wrench : IMessage
    {
        ///<exclude/>
        public Wrench()
        {
            force = new Vector3();
            torque = new Vector3();
        }
        ///<exclude/>
        public Wrench(BinaryReader br)
        {
            Deserialize(br);
        }
        ///<exclude/>
        public Vector3 force { get; set; }
        ///<exclude/>
        public Vector3 torque { get; set; }
        ///<exclude/>
        public string MessageType
        {
            get { return "geometry_msgs/Wrench"; }
        }
        ///<exclude/>
        public string Md5Sum
        {
            get { return "4f539cf138b23283b520fd271b567936"; }
        }
        ///<exclude/>
        public string MessageDefinition
        {
            get { return "Vector3 force\nVector3 torque"; }
        }
        ///<exclude/>
        public bool HasHeader
        {
            get { return false; }
        }
        ///<exclude/>
        public void Serialize(BinaryWriter bw)
        {
            force.Serialize(bw);
            torque.Serialize(bw);
        }
        ///<exclude/>
        public void Deserialize(BinaryReader br)
        {
            force = new Vector3(br);
            torque = new Vector3(br);
        }
        ///<exclude/>
        public int SerializeLength
        {
            get { return force.SerializeLength + torque.SerializeLength; }
        }
        ///<exclude/>
        public bool Equals(Wrench other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.force.Equals(force) && other.torque.Equals(torque);
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(Wrench)) return false;
            return Equals((Wrench)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ force.GetHashCode();
                result = (result * 397) ^ torque.GetHashCode();
                return result;
            }
        }
    }
}
