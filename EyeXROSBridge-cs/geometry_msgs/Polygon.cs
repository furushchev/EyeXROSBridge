//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2015-02-02T21:01:47+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
using RosSharp.std_msgs;
namespace RosSharp.geometry_msgs
{
    ///<exclude/>
    public class Polygon : IMessage
    {
        ///<exclude/>
        public Polygon()
        {
            points = new List<Point32>();
        }
        ///<exclude/>
        public Polygon(BinaryReader br)
        {
            Deserialize(br);
        }
        ///<exclude/>
        public List<Point32> points { get; set; }
        ///<exclude/>
        public string MessageType
        {
            get { return "geometry_msgs/Polygon"; }
        }
        ///<exclude/>
        public string Md5Sum
        {
            get { return "cd60a26494a087f577976f0329fa120e"; }
        }
        ///<exclude/>
        public string MessageDefinition
        {
            get { return "Point32[] points"; }
        }
        ///<exclude/>
        public bool HasHeader
        {
            get { return false; }
        }
        ///<exclude/>
        public void Serialize(BinaryWriter bw)
        {
            bw.Write(points.Count); for(int i=0; i<points.Count; i++) { points[i].Serialize(bw);}
        }
        ///<exclude/>
        public void Deserialize(BinaryReader br)
        {
            points = new List<Point32>(br.ReadInt32()); for(int i=0; i<points.Capacity; i++) { var x = new Point32(br);points.Add(x);}
        }
        ///<exclude/>
        public int SerializeLength
        {
            get { return 4 + points.Sum(x => x.SerializeLength); }
        }
        ///<exclude/>
        public bool Equals(Polygon other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.points.SequenceEqual(points);
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(Polygon)) return false;
            return Equals((Polygon)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ points.GetHashCode();
                return result;
            }
        }
    }
}
