//----------------------------------------------------------------
// <auto-generated>
//     This code was generated by the GenMsg. Version: 0.1.0.0
//     Don't change it manually.
//     2015-02-02T21:01:49+09:00
// </auto-generated>
//----------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using RosSharp.Message;
using RosSharp.Service;
using RosSharp.std_msgs;
namespace RosSharp.geometry_msgs
{
    ///<exclude/>
    public class TwistWithCovarianceStamped : IMessage
    {
        ///<exclude/>
        public TwistWithCovarianceStamped()
        {
            header = new Header();
            twist = new TwistWithCovariance();
        }
        ///<exclude/>
        public TwistWithCovarianceStamped(BinaryReader br)
        {
            Deserialize(br);
        }
        ///<exclude/>
        public Header header { get; set; }
        ///<exclude/>
        public TwistWithCovariance twist { get; set; }
        ///<exclude/>
        public string MessageType
        {
            get { return "geometry_msgs/TwistWithCovarianceStamped"; }
        }
        ///<exclude/>
        public string Md5Sum
        {
            get { return "8927a1a12fb2607ceea095b2dc440a96"; }
        }
        ///<exclude/>
        public string MessageDefinition
        {
            get { return "Header header\nTwistWithCovariance twist"; }
        }
        ///<exclude/>
        public bool HasHeader
        {
            get { return true; }
        }
        ///<exclude/>
        public void Serialize(BinaryWriter bw)
        {
            header.Serialize(bw);
            twist.Serialize(bw);
        }
        ///<exclude/>
        public void Deserialize(BinaryReader br)
        {
            header = new Header(br);
            twist = new TwistWithCovariance(br);
        }
        ///<exclude/>
        public int SerializeLength
        {
            get { return header.SerializeLength + twist.SerializeLength; }
        }
        ///<exclude/>
        public bool Equals(TwistWithCovarianceStamped other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return other.header.Equals(header) && other.twist.Equals(twist);
        }
        ///<exclude/>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != typeof(TwistWithCovarianceStamped)) return false;
            return Equals((TwistWithCovarianceStamped)obj);
        }
        ///<exclude/>
        public override int GetHashCode()
        {
            unchecked
            {
                int result = 0;
                result = (result * 397) ^ header.GetHashCode();
                result = (result * 397) ^ twist.GetHashCode();
                return result;
            }
        }
    }
}
